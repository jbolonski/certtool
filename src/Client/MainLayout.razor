@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Routing
@inject IJSRuntime JS

<div class="app-shell">
    <aside class="app-nav">
        <div class="brand">
            <div class="brand-logo">üîê</div>
            <div class="brand-text">
                <span class="brand-title">Cert Monitor</span>
                <span class="brand-year">2025</span>
            </div>
        </div>
        <nav class="nav-links">
            <NavLink href="/" Match="NavLinkMatch.All" class="nav-item"><span class="nav-icon">üè†</span><span>Dashboard</span></NavLink>
            <NavLink href="/certificates" class="nav-item"><span class="nav-icon">üìú</span><span>Certificates</span></NavLink>
            <NavLink href="/hosts" class="nav-item"><span class="nav-icon">üñ•Ô∏è</span><span>Hosts</span></NavLink>
        </nav>
        <div class="nav-footer">
            <button class="mode-toggle" @onclick="ToggleDarkMode" title="Toggle color mode">@((isDarkMode ? "‚òÄ Light" : "üåô Dark"))</button>
        </div>
    </aside>
    <div class="app-main">
        <header class="app-bar">
            <div class="app-bar-left">
                <h1 class="page-title">@currentTitle</h1>
            </div>
            <div class="app-bar-right">
                <button class="mode-toggle inline" @onclick="ToggleDarkMode" title="Toggle color mode">@((isDarkMode ? "‚òÄ" : "üåô"))</button>
            </div>
        </header>
        <main class="app-content">
            <div class="content-inner">
                @Body
            </div>
        </main>
    </div>
</div>

@code {
    private bool isDarkMode;
    private string currentTitle = "";

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var stored = await JS.InvokeAsync<string>("localStorage.getItem", "certtool-darkmode");
            isDarkMode = stored == "1" || (string.IsNullOrEmpty(stored) && await PrefersDark());
            UpdateBodyClass();
            DeriveTitle(NavigationManager?.Uri);
        }
    }

    [Inject] private NavigationManager NavigationManager { get; set; } = default!;

    protected override void OnParametersSet()
    {
        DeriveTitle(NavigationManager?.Uri);
    }

    private void DeriveTitle(string? uri)
    {
        if (string.IsNullOrEmpty(uri)) { currentTitle = "Dashboard"; return; }
        if (uri.EndsWith("/hosts", StringComparison.OrdinalIgnoreCase)) currentTitle = "Hosts";
        else if (uri.EndsWith("/certificates", StringComparison.OrdinalIgnoreCase)) currentTitle = "Certificates";
        else currentTitle = "Cert Monitor";
    }

    private async Task<bool> PrefersDark()
    {
        try { return await JS.InvokeAsync<bool>("matchMedia", "(prefers-color-scheme: dark)"); } catch { return false; }
    }

    private async void ToggleDarkMode()
    {
        isDarkMode = !isDarkMode;
        await JS.InvokeVoidAsync("localStorage.setItem", "certtool-darkmode", isDarkMode ? "1" : "0");
        UpdateBodyClass();
    }

    private async void UpdateBodyClass()
    {
        if (isDarkMode)
            await JS.InvokeVoidAsync("document.documentElement.classList.add", "dark-mode");
        else
            await JS.InvokeVoidAsync("document.documentElement.classList.remove", "dark-mode");
    }
}
